/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.22.5
// source: room.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./room_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.RoomClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.RoomPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.RoomValsId,
 *   !proto.RoomVals>}
 */
const methodDescriptor_Room_GetRoominfo = new grpc.web.MethodDescriptor(
  '/Room/GetRoominfo',
  grpc.web.MethodType.UNARY,
  proto.RoomValsId,
  proto.RoomVals,
  /**
   * @param {!proto.RoomValsId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.RoomVals.deserializeBinary
);


/**
 * @param {!proto.RoomValsId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.RoomVals)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.RoomVals>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RoomClient.prototype.getRoominfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Room/GetRoominfo',
      request,
      metadata || {},
      methodDescriptor_Room_GetRoominfo,
      callback);
};


/**
 * @param {!proto.RoomValsId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.RoomVals>}
 *     Promise that resolves to the response
 */
proto.RoomPromiseClient.prototype.getRoominfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Room/GetRoominfo',
      request,
      metadata || {},
      methodDescriptor_Room_GetRoominfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.RoomVals,
 *   !proto.RoomValsId>}
 */
const methodDescriptor_Room_AddRoominfo = new grpc.web.MethodDescriptor(
  '/Room/AddRoominfo',
  grpc.web.MethodType.UNARY,
  proto.RoomVals,
  proto.RoomValsId,
  /**
   * @param {!proto.RoomVals} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.RoomValsId.deserializeBinary
);


/**
 * @param {!proto.RoomVals} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.RoomValsId)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.RoomValsId>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RoomClient.prototype.addRoominfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Room/AddRoominfo',
      request,
      metadata || {},
      methodDescriptor_Room_AddRoominfo,
      callback);
};


/**
 * @param {!proto.RoomVals} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.RoomValsId>}
 *     Promise that resolves to the response
 */
proto.RoomPromiseClient.prototype.addRoominfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Room/AddRoominfo',
      request,
      metadata || {},
      methodDescriptor_Room_AddRoominfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.RoomVals,
 *   !proto.RoomVals>}
 */
const methodDescriptor_Room_UpdateRoominfo = new grpc.web.MethodDescriptor(
  '/Room/UpdateRoominfo',
  grpc.web.MethodType.UNARY,
  proto.RoomVals,
  proto.RoomVals,
  /**
   * @param {!proto.RoomVals} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.RoomVals.deserializeBinary
);


/**
 * @param {!proto.RoomVals} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.RoomVals)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.RoomVals>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RoomClient.prototype.updateRoominfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Room/UpdateRoominfo',
      request,
      metadata || {},
      methodDescriptor_Room_UpdateRoominfo,
      callback);
};


/**
 * @param {!proto.RoomVals} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.RoomVals>}
 *     Promise that resolves to the response
 */
proto.RoomPromiseClient.prototype.updateRoominfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Room/UpdateRoominfo',
      request,
      metadata || {},
      methodDescriptor_Room_UpdateRoominfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.RoomValsId,
 *   !proto.Empty>}
 */
const methodDescriptor_Room_DeleteRoominfo = new grpc.web.MethodDescriptor(
  '/Room/DeleteRoominfo',
  grpc.web.MethodType.UNARY,
  proto.RoomValsId,
  proto.Empty,
  /**
   * @param {!proto.RoomValsId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Empty.deserializeBinary
);


/**
 * @param {!proto.RoomValsId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.RoomClient.prototype.deleteRoominfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Room/DeleteRoominfo',
      request,
      metadata || {},
      methodDescriptor_Room_DeleteRoominfo,
      callback);
};


/**
 * @param {!proto.RoomValsId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Empty>}
 *     Promise that resolves to the response
 */
proto.RoomPromiseClient.prototype.deleteRoominfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Room/DeleteRoominfo',
      request,
      metadata || {},
      methodDescriptor_Room_DeleteRoominfo);
};


module.exports = proto;

